/*
Objetivo:
Interceptar os "selects" da tabela TBL_CTRL_ACESSO em uma visão, que já devolve o dado decriptografado. Esta visão seria a apresentação da tabela ( que tem os dados criptografados ).
Interceptar nesta visão, usando uma trigger de inserção, os "inserts" que virão com os dados abertas ( ou descriptografados ) e inseri-los, usando as funções criadas na AC2, na tabela TBL_CTRL_ACESSO, os dados já criptografados....

Desta forma: 
TBL_CTRL_ACESSO - terá os dados criptografados
vw_TBL_CTRL_ACESSO - terá dados decriptografados ( para insert e select )
*/

--Criando a visão, que servirá como fachada para a tabela.
CREATE OR ALTER VIEW VW_TBL_CTRL_ACESSO AS
SELECT 
	[LOGIN]
	--A coluna senha deve ser tipada como a 'fachada'.
	,CAST(SENHA AS VARCHAR) AS SENHA
	--A dica da senha já será varchar ( decriptografada )
	,dbo.FN_DECRYPT(DICA_SENHA) AS DICA_SENHA
FROM
	TBL_CTRL_ACESSO;
GO
--Testando a visão
SELECT * FROM VW_TBL_CTRL_ACESSO
GO
--Criando trigger para captura de inserção.
CREATE TRIGGER trg_II_tbl_ctrl_acesso 
ON VW_TBL_CTRL_ACESSO
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO TBL_CTRL_ACESSO ([LOGIN],SENHA,DICA_SENHA) 
	SELECT [LOGIN]
		, dbo.FN_HASH(SENHA)
		, dbo.FN_ENCRYPT(DICA_SENHA) 
	FROM INSERTED
END
--Testando a inserção na visão ( fachada da tabela )
INSERT INTO VW_TBL_CTRL_ACESSO 
VALUES ('Novo Login','Nova Senha','Nova Dica Senha');
GO
-- Conferindo a diferença entre a visão e a tabela
SELECT * FROM VW_TBL_CTRL_ACESSO where login = 'novo login'
SELECT * FROM TBL_CTRL_ACESSO where login = 'novo login'

/*
Testando [parcialmente] a técnica always encrypted
*/

USE [Cripto]
GO
CREATE COLUMN MASTER KEY AlwaysEncrypted_MasterKey
WITH (  
     KEY_STORE_PROVIDER_NAME = 'MSSQL_CERTIFICATE_STORE',   
     KEY_PATH = 'Current User/Personal/f2260f28d909d21c642a3d8e0b45a830e79a1420'  
   );  
---------------------------------------------  
CREATE COLUMN ENCRYPTION KEY AlwaysEncrypted_EncryptionKey
WITH VALUES  
(  
    COLUMN_MASTER_KEY = AlwaysEncrypted_MasterKey,   
    ALGORITHM = 'RSA_OAEP',   
    ENCRYPTED_VALUE = 0x01700000016C006F00630061006C006D0061006300680069006E0065002F006D0079002F003200660061006600640038003100320031003400340034006500620031006100320065003000360039003300340038006100350064003400300032003300380065006600620063006300610031006300284FC4316518CF3328A6D9304F65DD2CE387B79D95D077B4156E9ED8683FC0E09FA848275C685373228762B02DF2522AFF6D661782607B4A2275F2F922A5324B392C9D498E4ECFC61B79F0553EE8FB2E5A8635C4DBC0224D5A7F1B136C182DCDE32A00451F1A7AC6B4492067FD0FAC7D3D6F4AB7FC0E86614455DBB2AB37013E0A5B8B5089B180CA36D8B06CDB15E95A7D06E25AACB645D42C85B0B7EA2962BD3080B9A7CDB805C6279FE7DD6941E7EA4C2139E0D4101D8D7891076E70D433A214E82D9030CF1F40C503103075DEEB3D64537D15D244F503C2750CF940B71967F51095BFA51A85D2F764C78704CAB6F015EA87753355367C5C9F66E465C0C66BADEDFDF76FB7E5C21A0D89A2FCCA8595471F8918B1387E055FA0B816E74201CD5C50129D29C015895CD073925B6EA87CAF4A4FAF018C06A3856F5DFB724F42807543F777D82B809232B465D983E6F19DFB572BEA7B61C50154605452A891190FB5A0C4E464862CF5EFAD5E7D91F7D65AA1A78F688E69A1EB098AB42E95C674E234173CD7E0925541AD5AE7CED9A3D12FDFE6EB8EA4F8AAD2629D4F5A18BA3DDCC9CF7F352A892D4BEBDC4A1303F9C683DACD51A237E34B045EBE579A381E26B40DCFBF49EFFA6F65D17F37C6DBA54AA99A65D5573D4EB5BA038E024910A4D36B79A1D4E3C70349DADFF08FD8B4DEE77FDB57F01CB276ED5E676F1EC973154F86  
);  
---------------------------------------------  
GO
CREATE TABLE TBL_CTRL_ACESSO_AlwaysEncrypted (
	[LOGIN] VARCHAR(60) NOT NULL
	, [SENHA] VARCHAR(255) 
		COLLATE Latin1_General_BIN2 ENCRYPTED WITH 
		(
		   ENCRYPTION_TYPE = DETERMINISTIC, 
		   ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256', 
		   COLUMN_ENCRYPTION_KEY = AlwaysEncrypted_EncryptionKey
		)
	, [DICA_SENHA] VARCHAR(255) 
		COLLATE Latin1_General_BIN2 ENCRYPTED WITH 
		(
		   ENCRYPTION_TYPE = RANDOMIZED, 
		   ALGORITHM = 'AEAD_AES_256_CBC_HMAC_SHA_256', 
		   COLUMN_ENCRYPTION_KEY = AlwaysEncrypted_EncryptionKey
		)
	, CONSTRAINT PK_CTRL_ACESSO_AlwaysEncrypted PRIMARY KEY ( [LOGIN] )
)
GO
--Mas as facilidades acabam por ai...
-- O seguinte comando já dá erro:
INSERT INTO TBL_CTRL_ACESSO_AlwaysEncrypted
VALUES ('Novo Login','Nova Senha','Nova Dica Senha');
GO
/*
Depois de:
NA CONEXÃO: HABILITAR USO DE CRIPTOGRAFIA DE COLUNAS
NAS CONFIGURAÇÕES DO SSMS, HABILITAR O USO DE PARAMETRIZAÇÃO
*/
--Agora todo SQL deve só ser realizado com parâmetros
DECLARE @login VARCHAR(60) = 'Novo Login'
		, @SENHA VARCHAR(255) = 'Nova Senha'
		, @DICA_SENHA VARCHAR(255) = 'Nova Dica Senha'
INSERT INTO TBL_CTRL_ACESSO_AlwaysEncrypted
VALUES (@login,@SENHA,@DICA_SENHA);
GO

/*
Testando o TDE - Transparent Data Encryption
*/

--Vou para o banco MASTER
USE master;
GO
--Crio uma chave mestra ( para o servidor )
CREATE MASTER KEY ENCRYPTION BY PASSWORD = N'!@@QW#E#$R%dreud76';
go
--Crio um certificado ou obtenho um certificado assinado
CREATE CERTIFICATE MeuCertificadoParaTDE 
	WITH SUBJECT = 'Meu Certificado para TDE';
go
--Agora dentro do banco
USE Cripto;
GO
--Crio a chave de criptografia de banco de dados
-- protegido pelo certificado gerado
CREATE DATABASE ENCRYPTION KEY
	WITH ALGORITHM = AES_128
	ENCRYPTION BY SERVER CERTIFICATE MeuCertificadoParaTDE;
GO
-- Ligo a criptografia 
ALTER DATABASE Cripto SET ENCRYPTION ON;
GO
